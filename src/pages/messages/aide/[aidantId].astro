---
import Layout from "../../../layouts/Layoutapp.astro";
import ChatConversation from "../../../components/ChatConversation.astro";
import PocketBase from "pocketbase";
import { db } from "../../../firebase.js";
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  orderBy,
  getDoc,
  doc,
  serverTimestamp,
} from "firebase/firestore";

// Récupérer l'ID de l'aidant dans l'URL
const { aidantId } = Astro.params;
const conversationId = Astro.url.searchParams.get("conv");

// S'assurer que cette page n'est pas accédée directement sans ID d'aidant
if (!aidantId) {
  return Astro.redirect("/messages/aide");
}

// Récupérer l'utilisateur connecté (l'authentification reste avec PocketBase)
const pb = new PocketBase("https://echosafe.eloishenry.fr");
const authCookie = Astro.request.headers.get("cookie");
if (authCookie) {
  pb.authStore.loadFromCookie(authCookie);
}

// Rediriger si non connecté
if (!pb.authStore.isValid) {
  return Astro.redirect("/auth/connexion");
}

const currentUserId = pb.authStore.model.id;

// Récupérer les informations de l'aidant depuis Firestore
let aidant = null;
try {
  const aidantRef = doc(db, "users", aidantId);
  const aidantSnap = await getDoc(aidantRef);

  if (aidantSnap.exists()) {
    aidant = {
      id: aidantSnap.id,
      ...aidantSnap.data(),
    };
  } else {
    console.error("Aidant non trouvé dans Firestore");
    return Astro.redirect("/messages/aide");
  }
} catch (error) {
  console.error("Erreur lors de la récupération de l'aidant:", error);
  return Astro.redirect("/messages/aide");
}

// Vérifier si une conversation existe déjà ou utiliser celle de l'URL
let conversation = null;
try {
  if (conversationId) {
    // Utiliser la conversation de l'URL
    const conversationRef = doc(db, "conversations", conversationId);
    const conversationSnap = await getDoc(conversationRef);

    if (conversationSnap.exists()) {
      conversation = {
        id: conversationSnap.id,
        ...conversationSnap.data(),
      };
    } else {
      throw new Error("Conversation non trouvée");
    }
  } else {
    // Vérifier si une conversation existe déjà
    const conversationsRef = collection(db, "conversations");
    const q = query(
      conversationsRef,
      where("type", "==", "help"),
      where("participants", "array-contains", currentUserId)
    );

    const querySnapshot = await getDocs(q);

    // Chercher la conversation qui contient l'aidant
    for (const doc of querySnapshot.docs) {
      const data = doc.data();
      if (data.participants.includes(aidantId)) {
        conversation = {
          id: doc.id,
          ...data,
        };
        break;
      }
    }

    // Si aucune conversation n'existe, en créer une nouvelle
    if (!conversation) {
      const newConversation = await addDoc(collection(db, "conversations"), {
        type: "help",
        participants: [currentUserId, aidantId],
        created_at: serverTimestamp(),
        updated_at: serverTimestamp(),
      });

      conversation = {
        id: newConversation.id,
        type: "help",
        participants: [currentUserId, aidantId],
      };
    }
  }
} catch (error) {
  console.error(
    "Erreur lors de la récupération/création de la conversation:",
    error
  );
  return Astro.redirect("/messages/aide");
}

// Récupérer les messages de la conversation depuis Firestore
let messages = [];
if (conversation) {
  try {
    const messagesRef = collection(db, "messages");
    const q = query(
      messagesRef,
      where("conversation_id", "==", conversation.id),
      orderBy("created_at", "asc")
    );

    const querySnapshot = await getDocs(q);

    messages = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
      // Convertir les timestamps Firestore en dates JS pour le rendu côté client
      created: doc.data().created_at
        ? doc.data().created_at.toDate()
        : new Date(),
      updated: doc.data().updated_at
        ? doc.data().updated_at.toDate()
        : new Date(),
    }));
  } catch (error) {
    console.error("Erreur lors de la récupération des messages:", error);
  }
}

// Préparer les données de l'aidant pour le composant
aidant = aidant || {};
aidant.avatarUrl = ""; // Firebase n'a pas d'avatar par défaut, on utilise une chaîne vide
---

<Layout>
  <div class="flex flex-col h-[calc(100vh-64px)] bg-gray-100">
    <div class="container mx-auto px-4 py-3 flex items-center">
      <a
        href="/messages/aide"
        class="text-primary hover:bg-gray-100 p-1.5 rounded-full flex items-center mr-2 transition-colors"
        title="Retour aux aidants"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </a>
      <div class="flex items-center">
        <div
          class="w-9 h-9 rounded-full bg-secondary flex items-center justify-center text-white font-medium mr-2"
        >
          {aidant.pseudo_utilisateur?.charAt(0) || "A"}
        </div>
        <div>
          <p class="font-medium">{aidant.pseudo_utilisateur || "Aidant"}</p>
          <p class="text-xs text-secondary">
            Aidant bénévole • Conversation confidentielle
          </p>
        </div>
      </div>
    </div>

    <div class="flex-1 overflow-hidden px-4 pb-4">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden h-full">
        <ChatConversation
          conversationId={conversation?.id}
          otherUser={aidant}
          messages={messages}
          currentUserId={currentUserId}
          isVolunteerChat={true}
        />
      </div>
    </div>
  </div>
</Layout>
