---
import Layout from "../../../layouts/Layoutapp.astro";
import PocketBase from "pocketbase";
import { db } from "../../../firebase.js";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  getDoc,
  setDoc,
} from "firebase/firestore";

// Récupérer l'utilisateur connecté (l'authentification reste avec PocketBase)
const pb = new PocketBase("https://echosafe.eloishenry.fr");
const authCookie = Astro.request.headers.get("cookie");
if (authCookie) {
  pb.authStore.loadFromCookie(authCookie);
}

// Rediriger si non connecté
if (!pb.authStore.isValid) {
  return Astro.redirect("/auth/connexion");
}

const currentUserId = pb.authStore.model.id;

try {
  // Récupérer tous les aidants de PocketBase
  const pocketBaseVolunteers = await pb.collection("users").getFullList({
    filter: "is_volunteer = true",
  });

  console.log(`${pocketBaseVolunteers.length} aidants trouvés dans PocketBase`);

  // Synchroniser chaque aidant avec Firebase
  for (const volunteer of pocketBaseVolunteers) {
    const volunteerRef = doc(db, "users", volunteer.id);

    // Données à synchroniser
    const userData = {
      pseudo_utilisateur:
        volunteer.pseudo || volunteer.prenom_utilisateur || "Aidant",
      is_volunteer: true,
      role: "volunteer",
      bio: volunteer.bio || "Aidant bénévole disponible pour vous aider.",
    };

    // Créer ou mettre à jour l'aidant dans Firebase
    await setDoc(volunteerRef, userData, { merge: true });
    console.log(`Aidant ${volunteer.id} synchronisé avec Firebase`);
  }
} catch (syncError) {
  console.error("Erreur lors de la synchronisation des aidants:", syncError);
}

// Vérifier et créer l'utilisateur courant dans Firebase s'il n'existe pas
try {
  const currentUserRef = doc(db, "users", currentUserId);
  const currentUserSnap = await getDoc(currentUserRef);

  if (!currentUserSnap.exists()) {
    console.log("Création de l'utilisateur courant dans Firebase");
    await setDoc(currentUserRef, {
      pseudo_utilisateur:
        pb.authStore.model.pseudo_utilisateur || "Utilisateur",
      is_volunteer: pb.authStore.model.is_volunteer || false,
      role: pb.authStore.model.is_volunteer ? "volunteer" : "user",
    });
  }
} catch (error) {
  console.error(
    "Erreur lors de la vérification/création de l'utilisateur:",
    error
  );
}

// Récupérer la liste des aidants (volontaires) depuis Firestore
let volunteers = [];
try {
  const usersRef = collection(db, "users");

  // Essayer d'abord avec is_volunteer = true
  let q = query(usersRef, where("is_volunteer", "==", true));
  let volunteersSnapshot = await getDocs(q);

  // Si aucun résultat, essayer avec role = volunteer
  if (volunteersSnapshot.empty) {
    console.log(
      "Aucun aidant trouvé avec is_volunteer=true, essai avec role=volunteer"
    );
    q = query(usersRef, where("role", "==", "volunteer"));
    volunteersSnapshot = await getDocs(q);
  }

  // Si toujours aucun résultat, récupérer tous les utilisateurs
  if (volunteersSnapshot.empty) {
    console.log(
      "Récupération de tous les utilisateurs pour trouver les aidants"
    );
    volunteersSnapshot = await getDocs(usersRef);

    // Filtrer les utilisateurs qui pourraient être des aidants
    volunteers = volunteersSnapshot.docs
      .filter((doc) => doc.id !== currentUserId)
      .map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          is_volunteer: data.is_volunteer || data.role === "volunteer" || false,
        };
      })
      .filter((user) => user.is_volunteer);
  } else {
    // Traiter les résultats de la requête filtrée
    volunteers = volunteersSnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
      is_volunteer: true,
    }));
  }

  console.log("Nombre de volontaires trouvés:", volunteers.length);

  // Si nous n'avons toujours aucun aidant, créons-en un pour les tests
  if (volunteers.length === 0) {
    console.log("Aucun aidant trouvé, création d'un aidant de test");

    // Créer un aidant de test dans Firebase
    const testAidantId = "aidant-test-" + Date.now();
    const testAidantRef = doc(db, "users", testAidantId);

    await setDoc(testAidantRef, {
      pseudo_utilisateur: "Aidant Test",
      is_volunteer: true,
      role: "volunteer",
      bio: "Ceci est un aidant de test créé automatiquement.",
    });

    // Ajouter l'aidant de test à la liste
    volunteers.push({
      id: testAidantId,
      pseudo_utilisateur: "Aidant Test",
      is_volunteer: true,
      role: "volunteer",
      bio: "Ceci est un aidant de test créé automatiquement.",
    });

    console.log("Aidant de test créé avec ID:", testAidantId);
  }
} catch (error) {
  console.error("Erreur lors de la récupération des aidants:", error);
}

// Récupérer les conversations d'aide existantes depuis Firestore
let existingConversationsMap = {};
try {
  const conversationsRef = collection(db, "conversations");
  const q = query(
    conversationsRef,
    where("type", "==", "help"),
    where("participants", "array-contains", currentUserId)
  );

  const querySnapshot = await getDocs(q);

  // Créer un map des aidants avec qui l'utilisateur a déjà une conversation
  for (const doc of querySnapshot.docs) {
    const conversation = doc.data();
    const volunteerParticipant = conversation.participants.find(
      (id) => id !== currentUserId
    );

    if (volunteerParticipant) {
      existingConversationsMap[volunteerParticipant] = doc.id;
    }
  }
} catch (error) {
  console.error("Erreur lors de la récupération des conversations:", error);
}
---

<Layout>
  <div class="container mx-auto px-3 sm:px-4 py-4 sm:py-6 max-w-6xl">
    <!-- En-tête mobile avec navigation -->
    <div
      class="sticky top-0 z-10 bg-white shadow-sm rounded-lg mb-4 sm:mb-6 sm:static sm:shadow-none sm:bg-transparent"
    >
      <div class="flex items-center justify-between p-4 sm:px-0 sm:py-2">
        <div class="flex items-center">
          <a
            href="/messages"
            class="text-primary hover:underline flex items-center mr-3"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 sm:h-5 sm:w-5 mr-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
            <span class="text-sm sm:text-base">Retour</span>
          </a>
          <h1
            class="text-lg sm:text-2xl font-bold text-primary flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 sm:h-6 sm:w-6 mr-1 sm:mr-2 text-secondary"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
              ></path>
            </svg>
            <span class="text-nowrap">Aidants</span>
          </h1>
        </div>

        <!-- Barre de recherche pour desktop -->
        <div class="relative hidden sm:block">
          <input
            type="text"
            id="search-volunteers-desktop"
            placeholder="Rechercher un aidant..."
            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-secondary/30 focus:border-secondary w-64"
          />
          <div
            class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Barre de recherche pour mobile -->
      <div class="px-4 pb-3 sm:hidden">
        <div class="relative">
          <input
            type="text"
            id="search-volunteers-mobile"
            placeholder="Rechercher un aidant..."
            class="w-full pl-10 pr-4 py-2 bg-gray-100 border border-gray-200 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-secondary/30 focus:bg-white"
          />
          <div
            class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Onglets de navigation rapide pour mobile -->
      <div class="flex border-t sm:hidden">
        <a
          href="/messages"
          class="flex-1 py-3 text-center text-gray-500 hover:text-primary font-medium text-sm"
        >
          Récents
        </a>
        <a
          href="/messages/prives"
          class="flex-1 py-3 text-center text-gray-500 hover:text-primary font-medium text-sm"
        >
          Messages privés
        </a>
        <a
          href="/messages/aide"
          class="flex-1 py-3 text-center text-secondary border-b-2 border-secondary font-medium text-sm"
        >
          Aide
        </a>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <!-- Bannière d'aide simplifiée sur mobile -->
      <div class="bg-gray-50 p-4 sm:p-5 border-b">
        <div class="flex items-start">
          <div
            class="p-2 bg-secondary/10 rounded-full mr-3 sm:mr-4 hidden sm:block"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-8 w-8 text-secondary"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
              ></path>
            </svg>
          </div>
          <div>
            <h2
              class="text-base sm:text-lg font-semibold text-gray-800 flex items-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-secondary sm:hidden"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z"
                  clip-rule="evenodd"></path>
              </svg>
              Besoin de soutien ?
            </h2>
            <p class="text-gray-600 mt-1 max-w-2xl text-sm sm:text-base">
              Nos aidants bénévoles sont disponibles pour vous écouter et vous
              accompagner.
            </p>
          </div>
        </div>
      </div>

      {
        volunteers.length === 0 && (
          <div class="text-center py-8 sm:py-12 px-4">
            <div class="bg-yellow-50 p-4 sm:p-6 rounded-xl max-w-lg mx-auto">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-10 sm:h-12 w-10 sm:w-12 mx-auto text-yellow-500 mb-3 sm:mb-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                />
              </svg>
              <p class="text-gray-700 font-medium text-base sm:text-lg">
                Aucun aidant disponible pour le moment
              </p>
              <p class="text-xs sm:text-sm mt-2 text-gray-600">
                Cela peut être dû à un problème technique ou à l'absence
                d'aidants enregistrés. Réessayez plus tard.
              </p>
            </div>
          </div>
        )
      }

      <div class="p-3 sm:p-6">
        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-6"
          id="volunteers-grid"
        >
          {
            volunteers.map((volunteer) => {
              const hasExistingConversation =
                volunteer.id in existingConversationsMap;
              const conversationUrl = hasExistingConversation
                ? `/messages/aide/${volunteer.id}?conv=${existingConversationsMap[volunteer.id]}`
                : `/messages/aide/${volunteer.id}`;

              const status = Math.random() > 0.5 ? "online" : "offline"; // Simulation de statut en ligne/hors ligne

              return (
                <div class="bg-white border rounded-xl overflow-hidden hover:shadow-md transition-all duration-300 transform hover:-translate-y-1 volunteer-card">
                  <div class="p-4 sm:p-5">
                    <div class="flex items-center mb-3 sm:mb-4">
                      <div class="relative">
                        <div class="w-12 h-12 sm:w-14 sm:h-14 rounded-full bg-gray-100 flex-shrink-0 overflow-hidden border-2 border-secondary flex items-center justify-center">
                          <span class="text-secondary text-lg sm:text-xl font-semibold">
                            {volunteer.pseudo_utilisateur?.charAt(0) || "A"}
                          </span>
                        </div>
                        <div
                          class={`absolute bottom-0 right-0 w-3 h-3 sm:w-4 sm:h-4 rounded-full border-2 border-white ${status === "online" ? "bg-green-500" : "bg-gray-400"}`}
                        />
                      </div>
                      <div class="ml-3 sm:ml-4">
                        <div class="flex items-center flex-wrap">
                          <h3 class="font-semibold text-gray-800 text-base sm:text-lg">
                            {volunteer.pseudo_utilisateur || "Aidant"}
                          </h3>
                          <span class="ml-2 px-2 py-0.5 bg-secondary/10 text-secondary rounded-full text-xxs sm:text-xs">
                            Aidant
                          </span>
                        </div>
                        <p class="text-xs sm:text-sm text-gray-500 flex items-center">
                          <span
                            class={`inline-block w-2 h-2 rounded-full mr-1.5 ${status === "online" ? "bg-green-500" : "bg-gray-400"}`}
                          />
                          {status === "online" ? "Disponible" : "Hors ligne"}
                        </p>
                      </div>
                    </div>

                    <div class="bg-gray-50 rounded-lg p-3 mb-3 sm:mb-4 max-h-16 sm:max-h-20 overflow-hidden">
                      <p class="text-xs sm:text-sm text-gray-600 italic line-clamp-3">
                        "
                        {volunteer.bio ||
                          "Disponible pour vous aider et vous écouter."}
                        "
                      </p>
                    </div>

                    <a
                      href={conversationUrl}
                      class="flex items-center justify-center w-full py-2 sm:py-2.5 px-4 bg-secondary text-white rounded-lg hover:bg-secondary/90 transition-colors font-medium text-sm sm:text-base"
                    >
                      {hasExistingConversation ? (
                        <>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 sm:h-5 w-4 sm:w-5 mr-2"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                          >
                            <path
                              fill-rule="evenodd"
                              d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"
                              clip-rule="evenodd"
                            />
                          </svg>
                          Continuer la discussion
                        </>
                      ) : (
                        <>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 sm:h-5 w-4 sm:w-5 mr-2"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                          >
                            <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z" />
                            <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z" />
                          </svg>
                          Démarrer une discussion
                        </>
                      )}
                    </a>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Script pour la recherche d'aidants
  document.addEventListener("DOMContentLoaded", () => {
    const searchInputDesktop = document.getElementById(
      "search-volunteers-desktop"
    );
    const searchInputMobile = document.getElementById(
      "search-volunteers-mobile"
    );

    const performSearch = (searchValue) => {
      const searchLower = searchValue.toLowerCase();
      const volunteerCards = document.querySelectorAll(".volunteer-card");

      volunteerCards.forEach((card) => {
        const volunteerName = card
          .querySelector("h3")
          .textContent.toLowerCase();
        const volunteerBio = card
          .querySelector(".bg-gray-50 p")
          .textContent.toLowerCase();

        if (
          volunteerName.includes(searchLower) ||
          volunteerBio.includes(searchLower)
        ) {
          card.style.display = "";
        } else {
          card.style.display = "none";
        }
      });
    };

    if (searchInputDesktop) {
      searchInputDesktop.addEventListener("input", (e) => {
        performSearch(e.target.value);
        // Synchroniser la recherche mobile
        if (searchInputMobile) searchInputMobile.value = e.target.value;
      });
    }

    if (searchInputMobile) {
      searchInputMobile.addEventListener("input", (e) => {
        performSearch(e.target.value);
        // Synchroniser la recherche desktop
        if (searchInputDesktop) searchInputDesktop.value = e.target.value;
      });
    }
  });
</script>

<style>
  /* Taille de texte extra petite pour mobile */
  .text-xxs {
    font-size: 0.65rem;
    line-height: 1.1;
  }

  /* Effet de pulsation pour les aidants en ligne */
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
    }
    70% {
      box-shadow: 0 0 0 6px rgba(16, 185, 129, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
    }
  }

  .bg-green-500 {
    animation: pulse 2s infinite;
  }

  /* Effet de transition fluide pour les cartes */
  .volunteer-card:active {
    transform: scale(0.98);
    transition: transform 0.1s;
  }
</style>
