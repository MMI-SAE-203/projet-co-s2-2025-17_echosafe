---
import Layout from "../../../layouts/Layoutapp.astro";
import ChatConversation from "../../../components/ChatConversation.astro";
import PocketBase from "pocketbase";
import { db } from "../../../firebase.js";
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  orderBy,
  getDoc,
  doc,
  serverTimestamp,
} from "firebase/firestore";

// Récupérer l'ID de l'utilisateur dans l'URL
const { userId } = Astro.params;

// S'assurer que cette page n'est pas accédée directement sans ID d'utilisateur
if (!userId) {
  return Astro.redirect("/messages/prives");
}

// Récupérer l'utilisateur connecté (l'authentification reste avec PocketBase)
const pb = new PocketBase("https://echosafe.eloishenry.fr");
const authCookie = Astro.request.headers.get("cookie");
if (authCookie) {
  pb.authStore.loadFromCookie(authCookie);
}

// Rediriger si non connecté
if (!pb.authStore.isValid) {
  return Astro.redirect("/auth/connexion");
}

const currentUserId = pb.authStore.model.id;

// Récupérer les informations de l'autre utilisateur depuis Firestore
let otherUser = null;
try {
  const userRef = doc(db, "users", userId);
  const userSnap = await getDoc(userRef);

  if (userSnap.exists()) {
    otherUser = {
      id: userSnap.id,
      ...userSnap.data(),
    };
  } else {
    console.error("Utilisateur non trouvé dans Firestore");
    return Astro.redirect("/messages/prives");
  }
} catch (error) {
  console.error("Erreur lors de la récupération de l'utilisateur:", error);
  return Astro.redirect("/messages/prives");
}

// Vérifier si une conversation existe déjà dans Firestore
let conversation = null;
try {
  const conversationsRef = collection(db, "conversations");
  const q = query(
    conversationsRef,
    where("type", "==", "private"),
    where("participants", "array-contains", currentUserId)
  );

  const querySnapshot = await getDocs(q);

  // Chercher la conversation qui contient l'autre utilisateur
  for (const doc of querySnapshot.docs) {
    const data = doc.data();
    if (data.participants.includes(userId)) {
      conversation = {
        id: doc.id,
        ...data,
      };
      break;
    }
  }

  // Si aucune conversation n'existe, en créer une nouvelle
  if (!conversation) {
    const newConversation = await addDoc(collection(db, "conversations"), {
      type: "private",
      participants: [currentUserId, userId],
      created_at: serverTimestamp(),
      updated_at: serverTimestamp(),
    });

    conversation = {
      id: newConversation.id,
      type: "private",
      participants: [currentUserId, userId],
    };
  }
} catch (error) {
  console.error(
    "Erreur lors de la récupération/création de la conversation:",
    error
  );
  return Astro.redirect("/messages/prives");
}

// Récupérer les messages de la conversation depuis Firestore
let messages = [];
if (conversation) {
  try {
    const messagesRef = collection(db, "messages");
    const q = query(
      messagesRef,
      where("conversation_id", "==", conversation.id),
      orderBy("created_at", "asc")
    );

    const querySnapshot = await getDocs(q);

    messages = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
      // Convertir les timestamps Firestore en dates JS pour le rendu côté client
      created: doc.data().created_at
        ? doc.data().created_at.toDate()
        : new Date(),
      updated: doc.data().updated_at
        ? doc.data().updated_at.toDate()
        : new Date(),
    }));
  } catch (error) {
    console.error("Erreur lors de la récupération des messages:", error);
  }
}

// Préparer les données de l'utilisateur pour le composant
otherUser = otherUser || {};
otherUser.avatarUrl = ""; // Firebase n'a pas d'avatar par défaut, on utilise une chaîne vide
---

<Layout>
  <div class="flex flex-col h-[calc(100vh-64px)] bg-gray-100">
    <div class="container mx-auto px-4 py-3 flex items-center">
      <a
        href="/messages/prives"
        class="text-primary hover:bg-gray-100 p-1.5 rounded-full flex items-center mr-2 transition-colors"
        title="Retour aux utilisateurs"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </a>
      <div class="flex items-center">
        <div
          class="w-9 h-9 rounded-full bg-primary flex items-center justify-center text-white font-medium mr-2"
        >
          {otherUser.pseudo_utilisateur?.charAt(0) || "?"}
        </div>
        <div>
          <p class="font-medium">
            {otherUser.pseudo_utilisateur || "Utilisateur"}
          </p>
          <p class="text-xs text-gray-500 flex items-center">
            <span class="inline-block w-2 h-2 rounded-full bg-green-500 mr-1.5"
            ></span>
            En ligne
          </p>
        </div>
      </div>

      <div class="ml-auto flex items-center space-x-2">
        <button
          class="p-2 text-gray-500 hover:bg-gray-100 rounded-full transition-colors"
          title="Options"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"
            ></path>
          </svg>
        </button>
      </div>
    </div>

    <div class="flex-1 overflow-hidden px-4 pb-4">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden h-full">
        <ChatConversation
          conversationId={conversation?.id}
          otherUser={otherUser}
          messages={messages}
          currentUserId={currentUserId}
        />
      </div>
    </div>
  </div>
</Layout>
