---
import Layout from "../../../layouts/Layoutapp.astro";
import PocketBase from "pocketbase";
import { db } from "../../../firebase.js";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  getDoc,
} from "firebase/firestore";

// Récupérer l'utilisateur connecté (l'authentification reste avec PocketBase)
const pb = new PocketBase("https://echosafe.eloishenry.fr");
const authCookie = Astro.request.headers.get("cookie");
if (authCookie) {
  pb.authStore.loadFromCookie(authCookie);
}

// Rediriger si non connecté
if (!pb.authStore.isValid) {
  return Astro.redirect("/auth/connexion");
}

const currentUserId = pb.authStore.model.id;

// Récupérer la liste des utilisateurs depuis Firestore (exclure l'utilisateur courant)
let users = [];
try {
  const usersRef = collection(db, "users");
  const usersSnapshot = await getDocs(usersRef);

  users = usersSnapshot.docs
    .map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }))
    .filter((user) => user.id !== currentUserId);
} catch (error) {
  console.error("Erreur lors de la récupération des utilisateurs:", error);
}

// Récupérer les conversations privées existantes depuis Firestore
let existingConversations = {};
try {
  const conversationsRef = collection(db, "conversations");
  const q = query(
    conversationsRef,
    where("type", "==", "private"),
    where("participants", "array-contains", currentUserId)
  );

  const querySnapshot = await getDocs(q);

  // Créer un map des utilisateurs avec qui l'utilisateur a déjà une conversation
  querySnapshot.docs.forEach((doc) => {
    const conversation = doc.data();
    const otherUserId = conversation.participants.find(
      (id) => id !== currentUserId
    );
    if (otherUserId) {
      existingConversations[otherUserId] = doc.id;
    }
  });
} catch (error) {
  console.error("Erreur lors de la récupération des conversations:", error);
}

// Séparer les utilisateurs avec qui on a déjà parlé et les nouveaux
const recentUsers = users.filter((user) => user.id in existingConversations);
const newUsers = users.filter((user) => !(user.id in existingConversations));
---

<Layout>
  <div class="container mx-auto px-3 sm:px-4 py-4 sm:py-6 max-w-6xl">
    <!-- En-tête mobile avec navigation -->
    <div class="sticky top-0 z-10 bg-white shadow-sm rounded-lg mb-4 sm:mb-6 sm:static sm:shadow-none sm:bg-transparent">
      <div class="flex items-center justify-between p-4 sm:px-0 sm:py-2">
        <div class="flex items-center">
          <a
            href="/messages"
            class="text-primary hover:underline flex items-center mr-3"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 sm:h-5 sm:w-5 mr-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
            <span class="text-sm sm:text-base">Retour</span>
          </a>
          <h1 class="text-lg sm:text-2xl font-bold text-primary">Messages privés</h1>
        </div>
        
        <!-- Barre de recherche plus visible sur desktop -->
        <div class="relative hidden sm:block">
          <input
            type="text"
            id="search-users-desktop"
            placeholder="Rechercher un utilisateur..."
            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary w-64"
          />
          <div
            class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Barre de recherche pour mobile -->
      <div class="px-4 pb-3 sm:hidden">
        <div class="relative">
          <input
            type="text"
            id="search-users-mobile"
            placeholder="Rechercher..."
            class="w-full pl-10 pr-4 py-2 bg-gray-100 border border-gray-200 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-primary/30 focus:bg-white"
          />
          <div
            class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Onglets de navigation rapide pour mobile -->
      <div class="flex border-t sm:hidden">
        <a href="/messages" class="flex-1 py-3 text-center text-gray-500 hover:text-primary font-medium text-sm">
          Récents
        </a>
        <a href="/messages/prives" class="flex-1 py-3 text-center text-primary border-b-2 border-primary font-medium text-sm">
          Messages privés
        </a>
        <a href="/messages/aide" class="flex-1 py-3 text-center text-gray-500 hover:text-secondary font-medium text-sm">
          Aide
        </a>
      </div>
    </div>

    {
      recentUsers.length > 0 && (
        <div class="mb-6">
          <h2 class="text-base sm:text-lg font-semibold text-gray-800 mb-3 sm:mb-4 px-3 sm:px-0 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-primary"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"
                clip-rule="evenodd"
              />
            </svg>
            Conversations récentes
          </h2>
          
          <!-- Affichage en liste horizontale sur mobile -->
          <div class="flex overflow-x-auto pb-2 sm:hidden px-3 -mx-3 space-x-3 hide-scrollbar recent-conversations">
            {recentUsers.map((user) => (
              <a
                href={`/messages/prives/${user.id}`}
                class="flex-shrink-0 w-48 flex items-center p-3 bg-white rounded-lg border border-gray-200 shadow-sm"
              >
                <div class="w-10 h-10 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden border-2 border-primary">
                  <div class="w-full h-full flex items-center justify-center bg-primary text-white text-lg">
                    {user.pseudo_utilisateur?.charAt(0) || "?"}
                  </div>
                </div>
                <div class="ml-3 flex-1 min-w-0">
                  <p class="font-semibold text-gray-800 truncate text-sm">
                    {user.pseudo_utilisateur || "Utilisateur"}
                  </p>
                  <p class="text-xs text-gray-500 flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-3 w-3 mr-1 text-green-500"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    Continuer
                  </p>
                </div>
              </a>
            ))}
          </div>
          
          <!-- Affichage en grille sur desktop -->
          <div class="hidden sm:grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {recentUsers.map((user) => (
              <a
                href={`/messages/prives/${user.id}`}
                class="flex items-center p-4 bg-white rounded-lg border border-gray-200 hover:shadow-md transition"
              >
                <div class="w-12 h-12 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden border-2 border-primary">
                  <div class="w-full h-full flex items-center justify-center bg-primary text-white text-lg">
                    {user.pseudo_utilisateur?.charAt(0) || "?"}
                  </div>
                </div>
                <div class="ml-3 flex-1 min-w-0">
                  <p class="font-semibold text-gray-800 truncate">
                    {user.pseudo_utilisateur || "Utilisateur"}
                  </p>
                  <p class="text-sm text-gray-500 flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-3 w-3 mr-1 text-green-500"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    Continuer la discussion
                  </p>
                </div>
              </a>
            ))}
          </div>
        </div>
      )
    }

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <div class="border-b px-4 sm:px-6 py-3 sm:py-4 bg-gray-50">
        <h2 class="text-base sm:text-lg font-semibold text-gray-800 flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-primary"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"
            ></path>
          </svg>
          Tous les utilisateurs
        </h2>
      </div>

      <div class="p-4 sm:p-6">
        <p class="text-gray-600 mb-4 sm:mb-6 text-sm sm:text-base">
          Sélectionnez un utilisateur pour démarrer ou continuer une
          conversation.
        </p>

        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 user-grid"
        >
          {
            users.map((user) => {
              const hasExistingConversation = user.id in existingConversations;

              return (
                <div class="border rounded-lg overflow-hidden hover:shadow-md transition bg-white">
                  <div class="p-3 sm:p-4">
                    <div class="flex items-center mb-2 sm:mb-3">
                      <div class="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden">
                        <div class="w-full h-full flex items-center justify-center bg-primary text-white text-lg">
                          {user.pseudo_utilisateur?.charAt(0) || "?"}
                        </div>
                      </div>
                      <div class="ml-3">
                        <p class="font-semibold text-gray-800 text-sm sm:text-base">
                          {user.pseudo_utilisateur || "Utilisateur"}
                        </p>
                        <p class="text-xxs sm:text-xs text-gray-500">
                          {user.role === "volunteer" ? (
                            <span class="inline-flex items-center bg-secondary/10 text-secondary px-2 py-0.5 rounded-full">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-3 w-3 mr-1"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                              >
                                <path d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" />
                              </svg>
                              Aidant
                            </span>
                          ) : (
                            <span>Utilisateur</span>
                          )}
                        </p>
                      </div>
                    </div>

                    <a
                      href={`/messages/prives/${user.id}`}
                      class={`block w-full py-2 text-center rounded transition text-sm sm:text-base ${
                        hasExistingConversation
                          ? "bg-gray-100 text-primary hover:bg-gray-200 border border-primary"
                          : "bg-primary text-white hover:bg-primary/90"
                      }`}
                    >
                      {hasExistingConversation
                        ? "Continuer la discussion"
                        : "Démarrer une discussion"}
                    </a>
                  </div>
                </div>
              );
            })
          }
        </div>

        {
          users.length === 0 && (
            <div class="text-center py-6 sm:py-8 bg-gray-50 rounded-lg">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-10 sm:h-12 w-10 sm:w-12 mx-auto text-gray-400 mb-3 sm:mb-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                />
              </svg>
              <p class="text-gray-500 text-base sm:text-lg">
                Aucun autre utilisateur disponible.
              </p>
              <p class="text-xs sm:text-sm text-gray-400 mt-2">
                Revenez plus tard ou invitez d'autres personnes à rejoindre la
                plateforme.
              </p>
            </div>
          )
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Script pour la recherche d'utilisateurs
  document.addEventListener("DOMContentLoaded", () => {
    const searchInputDesktop = document.getElementById("search-users-desktop");
    const searchInputMobile = document.getElementById("search-users-mobile");
    
    const performSearch = (searchValue) => {
      const searchLower = searchValue.toLowerCase();
      const userCards = document.querySelectorAll(".user-grid > div");

      userCards.forEach((card) => {
        const userName = card
          .querySelector(".font-semibold")
          .textContent.toLowerCase();
        if (userName.includes(searchLower)) {
          card.style.display = "";
        } else {
          card.style.display = "none";
        }
      });
    };

    if (searchInputDesktop) {
      searchInputDesktop.addEventListener("input", (e) => {
        performSearch(e.target.value);
        // Synchroniser la recherche mobile
        if (searchInputMobile) searchInputMobile.value = e.target.value;
      });
    }
    
    if (searchInputMobile) {
      searchInputMobile.addEventListener("input", (e) => {
        performSearch(e.target.value);
        // Synchroniser la recherche desktop
        if (searchInputDesktop) searchInputDesktop.value = e.target.value;
      });
    }
  });
</script>

<style>
  /* Masquer la barre de défilement tout en permettant le défilement */
  .hide-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
  
  /* Taille de texte extra petite pour mobile */
  .text-xxs {
    font-size: 0.65rem;
    line-height: 1.1;
  }
  
  /* Animation subtile pour les éléments de la liste de défilement horizontal */
  .recent-conversations > a:active {
    transform: scale(0.98);
    transition: transform 0.1s;
  }
</style>