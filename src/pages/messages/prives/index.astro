---
import Layout from "../../../layouts/Layoutapp.astro";
import PocketBase from "pocketbase";
import { db } from "../../../firebase.js";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  getDoc,
} from "firebase/firestore";

// Récupérer l'utilisateur connecté (l'authentification reste avec PocketBase)
const pb = new PocketBase("https://echosafe.eloishenry.fr");
const authCookie = Astro.request.headers.get("cookie");
if (authCookie) {
  pb.authStore.loadFromCookie(authCookie);
}

// Rediriger si non connecté
if (!pb.authStore.isValid) {
  return Astro.redirect("/auth/connexion");
}

const currentUserId = pb.authStore.model.id;

// Récupérer la liste des utilisateurs depuis Firestore (exclure l'utilisateur courant)
let users = [];
try {
  const usersRef = collection(db, "users");
  const usersSnapshot = await getDocs(usersRef);

  users = usersSnapshot.docs
    .map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }))
    .filter((user) => user.id !== currentUserId);
} catch (error) {
  console.error("Erreur lors de la récupération des utilisateurs:", error);
}

// Récupérer les conversations privées existantes depuis Firestore
let existingConversations = {};
try {
  const conversationsRef = collection(db, "conversations");
  const q = query(
    conversationsRef,
    where("type", "==", "private"),
    where("participants", "array-contains", currentUserId)
  );

  const querySnapshot = await getDocs(q);

  // Créer un map des utilisateurs avec qui l'utilisateur a déjà une conversation
  querySnapshot.docs.forEach((doc) => {
    const conversation = doc.data();
    const otherUserId = conversation.participants.find(
      (id) => id !== currentUserId
    );
    if (otherUserId) {
      existingConversations[otherUserId] = doc.id;
    }
  });
} catch (error) {
  console.error("Erreur lors de la récupération des conversations:", error);
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <div class="mb-4 flex items-center justify-between">
      <a
        href="/messages"
        class="text-primary hover:underline flex items-center"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Retour aux messages
      </a>
      <h1 class="text-2xl font-bold text-primary">Messages privés</h1>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <p class="text-gray-600 mb-6">
        Sélectionnez un utilisateur pour démarrer ou continuer une conversation.
      </p>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          users.map((user) => {
            const hasExistingConversation = user.id in existingConversations;

            return (
              <div class="border rounded-lg overflow-hidden hover:shadow-md transition">
                <div class="p-4">
                  <div class="flex items-center mb-3">
                    <div class="w-12 h-12 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden">
                      <div class="w-full h-full flex items-center justify-center bg-primary text-white text-lg">
                        {user.pseudo_utilisateur?.charAt(0) || "?"}
                      </div>
                    </div>
                    <div class="ml-3">
                      <p class="font-semibold">
                        {user.pseudo_utilisateur || "Utilisateur"}
                      </p>
                      <p class="text-sm text-gray-500">
                        {user.role === "volunteer" ? "Aidant" : "Utilisateur"}
                      </p>
                    </div>
                  </div>

                  <a
                    href={`/messages/prives/${user.id}`}
                    class="block w-full py-2 text-center bg-primary text-white rounded hover:bg-primary/90 transition"
                  >
                    {hasExistingConversation
                      ? "Continuer la discussion"
                      : "Démarrer une discussion"}
                  </a>
                </div>
              </div>
            );
          })
        }
      </div>

      {
        users.length === 0 && (
          <div class="text-center py-8">
            <p class="text-gray-500">Aucun autre utilisateur disponible.</p>
          </div>
        )
      }
    </div>
  </div>
</Layout>
