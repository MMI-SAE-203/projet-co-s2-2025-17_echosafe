---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <div class="bg-gray-50 flex justify-center items-center min-h-screen py-8">
    <div
      class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md border border-gray-100"
    >
      <h1
        class="text-3xl font-bold mb-6 text-center text-primary font-secondary"
      >
        Créer un compte
      </h1>

      <!-- Indicateur de progression -->
      <div class="mb-8">
        <div class="flex justify-between items-center">
          <div class="flex-1">
            <div id="progress-bar" class="h-2 bg-gray-200 rounded-full">
              <div
                id="progress-indicator"
                class="h-full bg-primary rounded-full transition-all duration-300"
                style="width: 25%"
              >
              </div>
            </div>
          </div>
        </div>
        <div class="flex justify-between mt-2 text-xs text-gray-500">
          <span id="step-1-label" class="font-medium text-primary">Compte</span>
          <span id="step-2-label">Profil</span>
          <span id="step-3-label">Informations</span>
          <span id="step-4-label">Finalisation</span>
        </div>
      </div>

      <form
        id="inscription-form"
        class="space-y-4"
        enctype="multipart/form-data"
      >
        <!-- Étape 1: Informations de compte -->
        <div id="step-1" class="step">
          <div class="form-group">
            <label
              for="email"
              class="block text-sm font-medium text-gray-700 mb-1">Email</label
            >
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="votre@email.com"
            />
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="email"></span>
          </div>

          <div class="form-group">
            <label
              for="pseudo"
              class="block text-sm font-medium text-gray-700 mb-1">Pseudo</label
            >
            <input
              type="text"
              id="pseudo"
              name="pseudo"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="Choisissez un pseudo"
            />
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="pseudo"></span>
          </div>

          <div class="form-group">
            <label
              for="password"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Mot de passe</label
            >
            <div class="relative">
              <input
                type="password"
                id="password"
                name="password"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                placeholder="Créez votre mot de passe"
                aria-describedby="password-requirements"
              />
              <button
                type="button"
                id="toggle-password"
                class="hover:cursor-pointer absolute right-3 top-3 text-gray-500 hover:text-primary"
                aria-label="Afficher/masquer le mot de passe"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                  ></path>
                </svg>
              </button>
            </div>

            <div
              id="password-requirements"
              class="mt-2 text-xs text-gray-600 bg-gray-50 p-2 rounded-md border border-gray-200"
            >
              <p class="font-medium mb-1">Votre mot de passe doit contenir :</p>
              <ul class="space-y-1 pl-5 list-disc">
                <li id="req-length" class="requirement">
                  Au moins 8 caractères
                </li>
                <li id="req-lowercase" class="requirement">
                  Au moins une lettre minuscule
                </li>
                <li id="req-uppercase" class="requirement">
                  Au moins une lettre majuscule
                </li>
                <li id="req-number" class="requirement">Au moins un chiffre</li>
                <li id="req-special" class="requirement">
                  Au moins un caractère spécial (!@#$%^&*)
                </li>
              </ul>
            </div>

            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="password"></span>
            <div id="password-strength" class="mt-2 hidden">
              <div class="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                <div
                  id="password-strength-bar"
                  class="h-full w-0 transition-all duration-300"
                >
                </div>
              </div>
              <p id="password-strength-text" class="text-xs mt-1"></p>
            </div>
          </div>

          <div class="form-group">
            <label
              for="passwordConfirm"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Confirmer le mot de passe</label
            >
            <input
              type="password"
              id="passwordConfirm"
              name="passwordConfirm"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="Confirmez votre mot de passe"
            />
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="passwordConfirm"></span>
          </div>
        </div>

        <!-- Étape 2: Informations personnelles de base -->
        <div id="step-2" class="step hidden">
          <div class="flex space-x-4">
            <div class="form-group w-1/2">
              <label
                for="prenom_utilisateur"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Prénom</label
              >
              <input
                type="text"
                id="prenom_utilisateur"
                name="prenom_utilisateur"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                placeholder="Votre prénom"
              />
              <span
                class="error-message text-sm text-red-500 hidden"
                data-for="prenom_utilisateur"></span>
            </div>

            <div class="form-group w-1/2">
              <label
                for="nom_utilisateur"
                class="block text-sm font-medium text-gray-700 mb-1">Nom</label
              >
              <input
                type="text"
                id="nom_utilisateur"
                name="nom_utilisateur"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                placeholder="Votre nom"
              />
              <span
                class="error-message text-sm text-red-500 hidden"
                data-for="nom_utilisateur"></span>
            </div>
          </div>

          <div class="form-group">
            <label
              for="birth_day"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Date de naissance</label
            >

            <div class="grid grid-cols-3 gap-2">
              <div>
                <select
                  id="birth_day"
                  name="birth_day"
                  required
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                >
                  <option value="" disabled selected>Jour</option>
                  <!-- Options générées par script -->
                </select>
              </div>

              <div>
                <select
                  id="birth_month"
                  name="birth_month"
                  required
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                >
                  <option value="" disabled selected>Mois</option>
                  <option value="1">Janvier</option>
                  <option value="2">Février</option>
                  <option value="3">Mars</option>
                  <option value="4">Avril</option>
                  <option value="5">Mai</option>
                  <option value="6">Juin</option>
                  <option value="7">Juillet</option>
                  <option value="8">Août</option>
                  <option value="9">Septembre</option>
                  <option value="10">Octobre</option>
                  <option value="11">Novembre</option>
                  <option value="12">Décembre</option>
                </select>
              </div>

              <div>
                <select
                  id="birth_year"
                  name="birth_year"
                  required
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                >
                  <option value="" disabled selected>Année</option>
                  <!-- Options générées par script -->
                </select>
              </div>
            </div>

            <!-- Champ caché pour stocker la date au format YYYY-MM-DD -->
            <input
              type="hidden"
              id="date_naissance_utilisateur"
              name="date_naissance_utilisateur"
            />

            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="date_naissance_utilisateur"></span>
          </div>

          <div class="form-group">
            <label
              for="telephone_utilisateur"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Téléphone</label
            >
            <div class="relative">
              <input
                type="tel"
                id="telephone_utilisateur"
                name="telephone_utilisateur"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
                placeholder="06 12 34 56 78"
              />
            </div>
            <div class="text-xs text-gray-500 mt-1">Format: 06 XX XX XX XX</div>
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="telephone_utilisateur"></span>
          </div>
        </div>

        <!-- Étape 3: Photo de profil -->
        <div id="step-3" class="step hidden">
          <div class="form-group">
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Photo de profil</label
            >
            <div class="flex flex-col items-center space-y-4">
              <div
                id="profile-preview"
                class="w-32 h-32 rounded-full bg-gray-200 border border-gray-300 overflow-hidden flex items-center justify-center"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-16 w-16 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  ></path>
                </svg>
              </div>
              <div class="w-full max-w-xs">
                <label
                  for="avatar"
                  class="block w-full cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-lg text-sm text-center text-gray-700 hover:bg-gray-50 transition"
                >
                  <span>Choisir une photo</span>
                  <input
                    type="file"
                    id="avatar"
                    name="avatar"
                    accept="image/*"
                    class="hidden"
                  />
                </label>
                <p class="text-xs text-gray-500 mt-1 text-center">
                  JPG ou PNG, 5 Mo max
                </p>
              </div>
            </div>
            <span
              class="error-message text-sm text-red-500 hidden text-center mt-2"
              data-for="avatar"></span>
          </div>

          <div class="mt-8 text-center text-sm text-gray-500">
            <p>
              La photo de profil est facultative, vous pourrez l'ajouter plus
              tard.
            </p>
          </div>
        </div>

        <!-- Étape 4: Conditions et validation finale -->
        <div id="step-4" class="step hidden">
          <div
            class="bg-primary/5 p-4 rounded-lg border border-primary/10 mb-6"
          >
            <h3 class="font-medium text-primary mb-2">Récapitulatif</h3>
            <div class="space-y-2 text-sm">
              <p id="recap-email"></p>
              <p id="recap-pseudo"></p>
              <p id="recap-name"></p>
            </div>
          </div>

          <div class="bg-primary/5 p-3 rounded-lg border border-primary/10">
            <label class="flex items-start">
              <input
                type="checkbox"
                id="terms"
                name="terms"
                required
                class="mt-1 rounded border-gray-300 text-primary focus:ring-primary/30"
              />
              <span class="ml-2 text-sm text-gray-700"
                >J'accepte les <a
                  href="/conditions"
                  class="text-primary hover:underline"
                  >conditions d'utilisation</a
                > et la <a
                  href="/legal/politique-confidentialite"
                  class="text-primary hover:underline"
                  >politique de confidentialité</a
                ></span
              >
            </label>
            <span
              class="error-message text-sm text-red-500 hidden block mt-1"
              data-for="terms"></span>
          </div>
        </div>

        <!-- Navigation des étapes -->
        <div class="flex justify-between mt-8">
          <button
            type="button"
            id="prev-btn"
            class="hover:cursor-pointer bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors duration-300 hidden"
          >
            Précédent
          </button>

          <div class="flex-1"></div>

          <button
            type="button"
            id="next-btn"
            class="hover:cursor-pointer bg-primary text-white py-2 px-6 rounded-lg hover:bg-primary/90 transition-colors duration-300"
          >
            Continuer
          </button>

          <button
            type="submit"
            id="submit-button"
            class="hover:cursor-pointer w-full bg-primary text-white py-3 px-4 rounded-3xl hover:bg-white hover:text-primary border border-primary transition-colors duration-300 hidden"
          >
            <span id="button-text">S'inscrire</span>
            <span id="button-loader" class="hidden">
              <svg
                class="animate-spin h-5 w-5 text-white mx-auto"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </span>
          </button>
        </div>

        <div id="message" class="mt-4 text-center hidden p-3 rounded-md"></div>
      </form>

      <div class="mt-6 text-center text-sm">
        Déjà inscrit? <a
          href="/auth/connexion"
          class="text-primary hover:underline font-medium">Se connecter</a
        >
      </div>

      <!-- Séparateur pour les connexions sociales -->
      <div class="mt-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-200"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">Ou continuer avec</span>
          </div>
        </div>

        <div class="mt-6 grid grid-cols-2 gap-3">
          <a
            href="#"
            class="flex justify-center items-center px-4 py-2 border border-gray-300 rounded-3xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-300"
          >
            <svg
              class="h-5 w-5 mr-2"
              fill="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <!-- Icône Google simplifiée -->
              <path
                d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
              ></path>
            </svg>
            Google
          </a>
          <a
            href="#"
            class="flex justify-center items-center px-4 py-2 border border-gray-300 rounded-3xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-300"
          >
            <svg
              class="h-5 w-5 mr-2"
              fill="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <!-- Icône Facebook simplifiée -->
              <path
                d="M24,12.073c0,-5.8 -4.701,-10.5 -10.5,-10.5s-10.5,4.7 -10.5,10.5c0,5.24 3.84,9.584 8.86,10.373v-7.337h-2.666v-3.036h2.666v-2.314c0,-2.633 1.568,-4.086 3.966,-4.086c1.15,0 2.351,0.205 2.351,0.205v2.585h-1.324c-1.304,0 -1.711,0.81 -1.711,1.64v1.97h2.912l-0.465,3.036h-2.447v7.337c5.02,-0.788 8.859,-5.131 8.859,-10.373Z"
              ></path>
            </svg>
            Facebook
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Éléments DOM
      const form = document.getElementById("inscription-form");
      const steps = document.querySelectorAll(".step");
      const stepLabels = [
        document.getElementById("step-1-label"),
        document.getElementById("step-2-label"),
        document.getElementById("step-3-label"),
        document.getElementById("step-4-label"),
      ];
      const prevBtn = document.getElementById("prev-btn");
      const nextBtn = document.getElementById("next-btn");
      const submitButton = document.getElementById("submit-button");
      const progressIndicator = document.getElementById("progress-indicator");
      const messageDiv = document.getElementById("message");
      const buttonText = document.getElementById("button-text");
      const buttonLoader = document.getElementById("button-loader");

      // Éléments pour le mot de passe
      const passwordInput = document.getElementById("password");
      const passwordConfirmInput = document.getElementById("passwordConfirm");
      const passwordStrengthBar = document.getElementById(
        "password-strength-bar"
      );
      const passwordStrengthText = document.getElementById(
        "password-strength-text"
      );
      const passwordStrengthDiv = document.getElementById("password-strength");
      const togglePasswordButton = document.getElementById("toggle-password");
      const reqLength = document.getElementById("req-length");
      const reqLowercase = document.getElementById("req-lowercase");
      const reqUppercase = document.getElementById("req-uppercase");
      const reqNumber = document.getElementById("req-number");
      const reqSpecial = document.getElementById("req-special");

      // Éléments pour la date de naissance
      const birthDay = document.getElementById("birth_day");
      const birthMonth = document.getElementById("birth_month");
      const birthYear = document.getElementById("birth_year");
      const dateNaissanceInput = document.getElementById(
        "date_naissance_utilisateur"
      );

      // Éléments pour la photo
      const photoInput = document.getElementById("avatar");
      const profilePreview = document.getElementById("profile-preview");

      // État actuel
      let currentStep = 0;

      // Génération des options pour les jours
      for (let i = 1; i <= 31; i++) {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = i;
        birthDay.appendChild(option);
      }

      // Génération des options pour les années
      const currentYear = new Date().getFullYear();
      for (let i = currentYear; i >= currentYear - 100; i--) {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = i;
        birthYear.appendChild(option);
      }

      // Mise à jour de l'affichage des étapes
      function updateStepDisplay() {
        // Afficher l'étape actuelle uniquement
        steps.forEach((step, index) => {
          if (index === currentStep) {
            step.classList.remove("hidden");
          } else {
            step.classList.add("hidden");
          }
        });

        // Mettre à jour la barre de progression
        const progressPercentage = ((currentStep + 1) / steps.length) * 100;
        progressIndicator.style.width = `${progressPercentage}%`;

        // Mettre à jour les étiquettes d'étape
        stepLabels.forEach((label, index) => {
          if (index <= currentStep) {
            label.classList.add("text-primary", "font-medium");
            label.classList.remove("text-gray-500");
          } else {
            label.classList.remove("text-primary", "font-medium");
            label.classList.add("text-gray-500");
          }
        });

        // Gérer l'affichage des boutons
        if (currentStep === 0) {
          prevBtn.classList.add("hidden");
        } else {
          prevBtn.classList.remove("hidden");
        }

        if (currentStep === steps.length - 1) {
          nextBtn.classList.add("hidden");
          submitButton.classList.remove("hidden");
        } else {
          nextBtn.classList.remove("hidden");
          submitButton.classList.add("hidden");
        }
      }

      // Fonction d'affichage des erreurs
      function showError(inputElement, message) {
        const errorElement = document.querySelector(
          `.error-message[data-for="${inputElement.name || inputElement.id}"]`
        );
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.classList.remove("hidden");
          if (inputElement.classList) {
            inputElement.classList.add("border-red-500");
          }
        }
        return false;
      }

      // Fonction de nettoyage des erreurs
      function clearError(inputElement) {
        const name =
          inputElement.name ||
          (inputElement.id === "birth_day" ||
          inputElement.id === "birth_month" ||
          inputElement.id === "birth_year"
            ? "date_naissance_utilisateur"
            : inputElement.id);

        const errorElement = document.querySelector(
          `.error-message[data-for="${name}"]`
        );
        if (errorElement) {
          errorElement.textContent = "";
          errorElement.classList.add("hidden");
        }
        if (inputElement.classList) {
          inputElement.classList.remove("border-red-500");
        }
      }

      // Mise à jour du champ date caché
      function updateDateField() {
        const day = birthDay.value;
        const month = birthMonth.value;
        const year = birthYear.value;

        clearError(birthDay);
        clearError(birthMonth);
        clearError(birthYear);

        if (day && month && year) {
          const formattedMonth = month.toString().padStart(2, "0");
          const formattedDay = day.toString().padStart(2, "0");
          dateNaissanceInput.value = `${year}-${formattedMonth}-${formattedDay}`;
          return true;
        }
        return false;
      }

      // Vérification de la force du mot de passe
      function checkPasswordStrength(password) {
        const requirements = {
          length: password.length >= 8,
          lowercase: /[a-z]/.test(password),
          uppercase: /[A-Z]/.test(password),
          number: /[0-9]/.test(password),
          special: /[^a-zA-Z0-9]/.test(password),
        };

        // Mise à jour visuelle des exigences
        reqLength.className = requirements.length
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqLowercase.className = requirements.lowercase
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqUppercase.className = requirements.uppercase
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqNumber.className = requirements.number
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqSpecial.className = requirements.special
          ? "requirement text-green-600"
          : "requirement text-gray-600";

        // Calcul de la force
        let strength = 0;
        if (requirements.length) strength += 1;
        if (requirements.lowercase) strength += 1;
        if (requirements.uppercase) strength += 1;
        if (requirements.number) strength += 1;
        if (requirements.special) strength += 1;

        passwordStrengthDiv.classList.remove("hidden");

        // Affichage visuel de la force
        if (strength === 0) {
          passwordStrengthBar.style.width = "0%";
          passwordStrengthBar.className = "h-full w-0 bg-gray-300";
          passwordStrengthText.textContent = "";
          return 0;
        } else if (strength <= 2) {
          passwordStrengthBar.style.width = "33%";
          passwordStrengthBar.className = "h-full bg-red-500";
          passwordStrengthText.textContent = "Faible";
          passwordStrengthText.className = "text-xs mt-1 text-red-500";
          return 1;
        } else if (strength <= 4) {
          passwordStrengthBar.style.width = "66%";
          passwordStrengthBar.className = "h-full bg-yellow-500";
          passwordStrengthText.textContent = "Moyen";
          passwordStrengthText.className = "text-xs mt-1 text-yellow-600";
          return 2;
        } else {
          passwordStrengthBar.style.width = "100%";
          passwordStrengthBar.className = "h-full bg-green-500";
          passwordStrengthText.textContent = "Fort";
          passwordStrengthText.className = "text-xs mt-1 text-green-500";
          return 3;
        }
      }

      // ===== VALIDATION SIMPLIFIÉE DES ÉTAPES =====

      // Valider l'étape 1 (Compte)
      function validateStep1() {
        let isValid = true;
        const email = document.getElementById("email");
        const pseudo = document.getElementById("pseudo");
        const password = document.getElementById("password");
        const passwordConfirm = document.getElementById("passwordConfirm");

        // Réinitialiser les erreurs
        [email, pseudo, password, passwordConfirm].forEach(clearError);

        // Valider l'email (vérification simple)
        if (!email.value) {
          isValid = showError(email, "L'email est obligatoire");
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email.value)) {
          isValid = showError(email, "L'email n'est pas valide");
        }

        // Valider le pseudo
        if (!pseudo.value) {
          isValid = showError(pseudo, "Le pseudo est obligatoire");
        } else if (!/^[a-zA-Z0-9_-]{3,20}$/.test(pseudo.value)) {
          isValid = showError(
            pseudo,
            "Le pseudo doit contenir entre 3 et 20 caractères (lettres, chiffres, _ ou -)"
          );
        }

        // Valider le mot de passe
        if (!password.value) {
          isValid = showError(password, "Le mot de passe est obligatoire");
        } else {
          const hasLength = password.value.length >= 8;
          const hasLower = /[a-z]/.test(password.value);
          const hasUpper = /[A-Z]/.test(password.value);
          const hasNumber = /[0-9]/.test(password.value);
          const hasSpecial = /[^a-zA-Z0-9]/.test(password.value);

          if (
            !hasLength ||
            !hasLower ||
            !hasUpper ||
            !hasNumber ||
            !hasSpecial
          ) {
            isValid = showError(
              password,
              "Votre mot de passe ne répond pas à toutes les exigences"
            );
          }
        }

        // Valider la confirmation du mot de passe
        if (!passwordConfirm.value) {
          isValid = showError(
            passwordConfirm,
            "Veuillez confirmer votre mot de passe"
          );
        } else if (password.value !== passwordConfirm.value) {
          isValid = showError(
            passwordConfirm,
            "Les mots de passe ne correspondent pas"
          );
        }

        return isValid;
      }

      // Valider l'étape 2 (Profil)
      function validateStep2() {
        let isValid = true;
        const prenom = document.getElementById("prenom_utilisateur");
        const nom = document.getElementById("nom_utilisateur");
        const telephone = document.getElementById("telephone_utilisateur");

        // Réinitialiser les erreurs
        [prenom, nom, telephone, birthDay, birthMonth, birthYear].forEach(
          clearError
        );

        // Valider prénom et nom
        if (!prenom.value) {
          isValid = showError(prenom, "Le prénom est obligatoire");
        }

        if (!nom.value) {
          isValid = showError(nom, "Le nom est obligatoire");
        }

        // Valider la date de naissance
        if (!birthDay.value || !birthMonth.value || !birthYear.value) {
          const errorElement = document.querySelector(
            '.error-message[data-for="date_naissance_utilisateur"]'
          );
          errorElement.textContent =
            "Veuillez indiquer votre date de naissance complète";
          errorElement.classList.remove("hidden");

          if (!birthDay.value) birthDay.classList.add("border-red-500");
          if (!birthMonth.value) birthMonth.classList.add("border-red-500");
          if (!birthYear.value) birthYear.classList.add("border-red-500");

          isValid = false;
        } else {
          // Vérifier l'âge minimum
          updateDateField();
          const birthDate = new Date(
            birthYear.value,
            birthMonth.value - 1,
            birthDay.value
          );
          const now = new Date();
          const minAge = 13;

          let age = now.getFullYear() - birthDate.getFullYear();
          const monthDiff = now.getMonth() - birthDate.getMonth();
          if (
            monthDiff < 0 ||
            (monthDiff === 0 && now.getDate() < birthDate.getDate())
          ) {
            age--;
          }

          if (age < minAge) {
            const errorElement = document.querySelector(
              '.error-message[data-for="date_naissance_utilisateur"]'
            );
            errorElement.textContent = `Vous devez avoir au moins ${minAge} ans pour vous inscrire`;
            errorElement.classList.remove("hidden");
            [birthDay, birthMonth, birthYear].forEach((el) =>
              el.classList.add("border-red-500")
            );
            isValid = false;
          }
        }

        // Valider le téléphone
        if (!telephone.value) {
          isValid = showError(
            telephone,
            "Le numéro de téléphone est obligatoire"
          );
        } else {
          const phoneValue = telephone.value.replace(/\s/g, "");
          if (phoneValue.length !== 10) {
            isValid = showError(
              telephone,
              "Le numéro doit contenir 10 chiffres"
            );
          }
        }

        return isValid;
      }

      // Valider l'étape 3 (Photo)
      function validateStep3() {
        // La photo est facultative, donc toujours valide
        return true;
      }

      // Valider l'étape 4 (Finalisation)
      function validateStep4() {
        let isValid = true;
        const terms = document.getElementById("terms");

        if (!terms.checked) {
          isValid = showError(
            terms,
            "Vous devez accepter les conditions d'utilisation"
          );
        } else {
          clearError(terms);
        }

        return isValid;
      }

      // ===== GESTIONNAIRES D'ÉVÉNEMENTS =====

      // Bouton précédent
      prevBtn.addEventListener("click", () => {
        if (currentStep > 0) {
          currentStep--;
          updateStepDisplay();
        }
      });

      // Bouton suivant (SIMPLIFIÉ)
      nextBtn.addEventListener("click", () => {
        let isValid = false;

        // Valider l'étape actuelle
        switch (currentStep) {
          case 0:
            isValid = validateStep1();
            break;
          case 1:
            isValid = validateStep2();
            break;
          case 2:
            isValid = validateStep3();
            break;
          case 3:
            isValid = validateStep4();
            break;
        }

        // Si l'étape est valide, passer à la suivante
        if (isValid && currentStep < steps.length - 1) {
          currentStep++;
          updateStepDisplay();

          // Si on est à la dernière étape, mettre à jour le récapitulatif
          if (currentStep === steps.length - 1) {
            document.getElementById("recap-email").textContent =
              `Email: ${document.getElementById("email").value}`;
            document.getElementById("recap-pseudo").textContent =
              `Pseudo: ${document.getElementById("pseudo").value}`;
            document.getElementById("recap-name").textContent =
              `Nom complet: ${document.getElementById("prenom_utilisateur").value} ${document.getElementById("nom_utilisateur").value}`;
          }
        }
      });

      // Écouteurs pour les champs de date
      birthDay.addEventListener("change", updateDateField);
      birthMonth.addEventListener("change", updateDateField);
      birthYear.addEventListener("change", updateDateField);

      // Formatage du téléphone
      const phoneInput = document.getElementById("telephone_utilisateur");
      phoneInput.addEventListener("input", function (e) {
        let value = e.target.value.replace(/\D/g, "");
        if (value.length > 0) {
          try {
            value = value.match(/.{1,2}/g).join(" ");
          } catch (error) {
            console.log("Erreur de formatage du téléphone");
          }
        }
        e.target.value = value;
      });

      // Prévisualisation de la photo
      photoInput.addEventListener("change", function () {
        const file = this.files[0];
        if (file) {
          const fileType = file.type;
          const fileSize = file.size / 1024 / 1024;
          const allowedTypes = ["image/jpeg", "image/png", "image/jpg"];
          const errorElement = document.querySelector(
            '.error-message[data-for="avatar"]'
          );

          if (!allowedTypes.includes(fileType)) {
            errorElement.textContent =
              "Format de fichier non supporté. Utilisez JPG ou PNG.";
            errorElement.classList.remove("hidden");
            this.value = "";
            return;
          }

          if (fileSize > 5) {
            errorElement.textContent =
              "La taille du fichier ne doit pas dépasser 5 Mo.";
            errorElement.classList.remove("hidden");
            this.value = "";
            return;
          }

          clearError(this);
          const reader = new FileReader();
          reader.onload = function (e) {
            profilePreview.innerHTML = `<img src="${e.target.result}" alt="Aperçu" class="w-full h-full object-cover">`;
          };
          reader.readAsDataURL(file);
        }
      });

      // Vérification de la force du mot de passe
      passwordInput.addEventListener("input", (e) => {
        checkPasswordStrength(e.target.value);
      });

      // Toggle visibilité du mot de passe
      togglePasswordButton.addEventListener("click", () => {
        const type =
          passwordInput.getAttribute("type") === "password"
            ? "text"
            : "password";
        passwordInput.setAttribute("type", type);
        passwordConfirmInput.setAttribute("type", type);

        if (type === "text") {
          togglePasswordButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
            </svg>
          `;
        } else {
          togglePasswordButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          `;
        }
      });

      // Soumission du formulaire
      form.addEventListener("submit", async (event) => {
        event.preventDefault();

        // Vérifier la validité de tous les champs
        if (!validateStep4()) {
          return;
        }

        // Préparation pour l'envoi
        buttonText.classList.add("hidden");
        buttonLoader.classList.remove("hidden");
        submitButton.disabled = true;
        messageDiv.textContent = "";
        messageDiv.className = "mt-4 text-center hidden";

        const formData = new FormData(form);

        try {
          const response = await fetch("/api/register", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
          }

          const result = await response.json();

          if (result.status === "success") {
            messageDiv.textContent =
              "Inscription réussie ! Redirection en cours...";
            messageDiv.className =
              "mt-4 text-center block p-3 bg-green-100 text-green-700 rounded-md";
            form.reset();

            // Réinitialiser l'aperçu de la photo
            profilePreview.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            `;

            // Redirection après 2 secondes
            setTimeout(() => {
              window.location.href = "/auth/connexion";
            }, 2000);
          } else {
            messageDiv.textContent =
              result.message || "Une erreur est survenue. Veuillez réessayer.";
            messageDiv.className =
              "mt-4 text-center block p-3 bg-red-100 text-red-700 rounded-md";
            buttonText.classList.remove("hidden");
            buttonLoader.classList.add("hidden");
            submitButton.disabled = false;
          }
        } catch (error) {
          console.error("Erreur:", error);
          messageDiv.textContent =
            error.message ||
            "Une erreur est survenue lors de la connexion au serveur.";
          messageDiv.className =
            "mt-4 text-center block p-3 bg-red-100 text-red-700 rounded-md";
          buttonText.classList.remove("hidden");
          buttonLoader.classList.add("hidden");
          submitButton.disabled = false;
        }
      });

      // Initialiser l'affichage
      updateStepDisplay();
    });
  </script>
</Layout>
