---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <div class="bg-gray-50 flex justify-center items-center min-h-screen py-8">
    <div
      class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md border border-gray-100"
    >
      <h1
        class="text-3xl font-bold mb-6 text-center text-primary font-secondary"
      >
        Créer un compte
      </h1>

      <form
        id="inscription-form"
        class="space-y-4"
        enctype="multipart/form-data"
      >
        <!-- Ajout du champ pour la photo de profil -->
        <div class="form-group">
          <label class="block text-sm font-medium text-gray-700 mb-1"
            >Photo de profil</label
          >
          <div class="flex items-center space-x-4">
            <div
              id="profile-preview"
              class="w-24 h-24 rounded-full bg-gray-200 border border-gray-300 overflow-hidden flex items-center justify-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-12 w-12 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                ></path>
              </svg>
            </div>
            <div class="flex-1">
              <label
                for="avatar"
                class="block w-full cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-lg text-sm text-center text-gray-700 hover:bg-gray-50 transition"
              >
                <span>Choisir une photo</span>
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/*"
                  class="hidden"
                />
              </label>
              <p class="text-xs text-gray-500 mt-1">JPG ou PNG, 5 Mo max</p>
            </div>
          </div>
          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="avatar"></span>
        </div>

        <div class="form-group">
          <label
            for="email"
            class="block text-sm font-medium text-gray-700 mb-1">Email</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
            placeholder="votre@email.com"
          />
          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="email"></span>
        </div>

        <div class="form-group">
          <label
            for="password"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Mot de passe</label
          >
          <div class="relative">
            <input
              type="password"
              id="password"
              name="password"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="Créez votre mot de passe"
              aria-describedby="password-requirements"
            />
            <button
              type="button"
              id="toggle-password"
              class="absolute right-3 top-3 text-gray-500 hover:text-primary"
              aria-label="Afficher/masquer le mot de passe"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                ></path>
              </svg>
            </button>
          </div>

          <div
            id="password-requirements"
            class="mt-2 text-xs text-gray-600 bg-gray-50 p-2 rounded-md border border-gray-200"
          >
            <p class="font-medium mb-1">Votre mot de passe doit contenir :</p>
            <ul class="space-y-1 pl-5 list-disc">
              <li id="req-length" class="requirement">Au moins 8 caractères</li>
              <li id="req-lowercase" class="requirement">
                Au moins une lettre minuscule
              </li>
              <li id="req-uppercase" class="requirement">
                Au moins une lettre majuscule
              </li>
              <li id="req-number" class="requirement">Au moins un chiffre</li>
              <li id="req-special" class="requirement">
                Au moins un caractère spécial (!@#$%^&*)
              </li>
            </ul>
          </div>

          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="password"></span>
          <div id="password-strength" class="mt-2 hidden">
            <div class="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
              <div
                id="password-strength-bar"
                class="h-full w-0 transition-all duration-300"
              >
              </div>
            </div>
            <p id="password-strength-text" class="text-xs mt-1"></p>
          </div>
        </div>

        <div class="form-group">
          <label
            for="passwordConfirm"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Confirmer le mot de passe</label
          >
          <input
            type="password"
            id="passwordConfirm"
            name="passwordConfirm"
            required
            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
            placeholder="Confirmez votre mot de passe"
          />
          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="passwordConfirm"></span>
        </div>

        <div class="flex space-x-4">
          <div class="form-group w-1/2">
            <label
              for="prenom_utilisateur"
              class="block text-sm font-medium text-gray-700 mb-1">Prénom</label
            >
            <input
              type="text"
              id="prenom_utilisateur"
              name="prenom_utilisateur"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="Votre prénom"
            />
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="prenom_utilisateur"></span>
          </div>

          <div class="form-group w-1/2">
            <label
              for="nom_utilisateur"
              class="block text-sm font-medium text-gray-700 mb-1">Nom</label
            >
            <input
              type="text"
              id="nom_utilisateur"
              name="nom_utilisateur"
              required
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="Votre nom"
            />
            <span
              class="error-message text-sm text-red-500 hidden"
              data-for="nom_utilisateur"></span>
          </div>
        </div>

        <div class="form-group">
          <label
            for="birth_day"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Date de naissance</label
          >

          <div class="grid grid-cols-3 gap-2">
            <div>
              <select
                id="birth_day"
                name="birth_day"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              >
                <option value="" disabled selected>Jour</option>
                <!-- Options générées par script -->
              </select>
            </div>

            <div>
              <select
                id="birth_month"
                name="birth_month"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              >
                <option value="" disabled selected>Mois</option>
                <option value="1">Janvier</option>
                <option value="2">Février</option>
                <option value="3">Mars</option>
                <option value="4">Avril</option>
                <option value="5">Mai</option>
                <option value="6">Juin</option>
                <option value="7">Juillet</option>
                <option value="8">Août</option>
                <option value="9">Septembre</option>
                <option value="10">Octobre</option>
                <option value="11">Novembre</option>
                <option value="12">Décembre</option>
              </select>
            </div>

            <div>
              <select
                id="birth_year"
                name="birth_year"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              >
                <option value="" disabled selected>Année</option>
                <!-- Options générées par script -->
              </select>
            </div>
          </div>

          <!-- Champ caché pour stocker la date au format YYYY-MM-DD -->
          <input
            type="hidden"
            id="date_naissance_utilisateur"
            name="date_naissance_utilisateur"
          />

          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="date_naissance_utilisateur"></span>
        </div>

        <div class="form-group">
          <label
            for="telephone_utilisateur"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Téléphone</label
          >
          <div class="relative">
            <span
              class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-500"
            >
              +33
            </span>
            <input
              type="tel"
              id="telephone_utilisateur"
              name="telephone_utilisateur"
              required
              class="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:outline-none transition"
              placeholder="6 12 34 56 78"
            />
          </div>
          <div class="text-xs text-gray-500 mt-1">
            Format: +33 6 XX XX XX XX (sans le premier 0)
          </div>
          <span
            class="error-message text-sm text-red-500 hidden"
            data-for="telephone_utilisateur"></span>
        </div>

        <div class="mt-4 bg-primary/5 p-3 rounded-lg border border-primary/10">
          <label class="flex items-start">
            <input
              type="checkbox"
              id="terms"
              name="terms"
              required
              class="mt-1 rounded border-gray-300 text-primary focus:ring-primary/30"
            />
            <span class="ml-2 text-sm text-gray-700"
              >J'accepte les <a
                href="/conditions"
                class="text-primary hover:underline">conditions d'utilisation</a
              > et la <a
                href="/legal/politique-confidentialite"
                class="text-primary hover:underline"
                >politique de confidentialité</a
              ></span
            >
          </label>
          <span
            class="error-message text-sm text-red-500 hidden block mt-1"
            data-for="terms"></span>
        </div>

        <button
          type="submit"
          id="submit-button"
          class="w-full bg-primary text-white py-3 px-4 rounded-3xl hover:bg-white hover:text-primary border border-primary transition-colors duration-300 mt-6"
        >
          <span id="button-text">S'inscrire</span>
          <span id="button-loader" class="hidden">
            <svg
              class="animate-spin h-5 w-5 text-white mx-auto"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          </span>
        </button>

        <div id="message" class="mt-4 text-center hidden p-3 rounded-md"></div>
      </form>

      <div class="mt-6 text-center text-sm">
        Déjà inscrit? <a
          href="/auth/connexion"
          class="text-primary hover:underline font-medium">Se connecter</a
        >
      </div>

      <!-- Séparateur pour les connexions sociales -->
      <div class="mt-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-200"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">Ou continuer avec</span>
          </div>
        </div>

        <div class="mt-6 grid grid-cols-2 gap-3">
          <a
            href="#"
            class="flex justify-center items-center px-4 py-2 border border-gray-300 rounded-3xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-300"
          >
            <svg
              class="h-5 w-5 mr-2"
              fill="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <!-- Icône Google simplifiée -->
              <path
                d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
              ></path>
            </svg>
            Google
          </a>
          <a
            href="#"
            class="flex justify-center items-center px-4 py-2 border border-gray-300 rounded-3xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-300"
          >
            <svg
              class="h-5 w-5 mr-2"
              fill="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <!-- Icône Facebook simplifiée -->
              <path
                d="M24,12.073c0,-5.8 -4.701,-10.5 -10.5,-10.5s-10.5,4.7 -10.5,10.5c0,5.24 3.84,9.584 8.86,10.373v-7.337h-2.666v-3.036h2.666v-2.314c0,-2.633 1.568,-4.086 3.966,-4.086c1.15,0 2.351,0.205 2.351,0.205v2.585h-1.324c-1.304,0 -1.711,0.81 -1.711,1.64v1.97h2.912l-0.465,3.036h-2.447v7.337c5.02,-0.788 8.859,-5.131 8.859,-10.373Z"
              ></path>
            </svg>
            Facebook
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("inscription-form");
      const messageDiv = document.getElementById("message");
      const submitButton = document.getElementById("submit-button");
      const buttonText = document.getElementById("button-text");
      const buttonLoader = document.getElementById("button-loader");
      const passwordInput = document.getElementById("password");
      const passwordConfirmInput = document.getElementById("passwordConfirm");
      const passwordStrengthBar = document.getElementById(
        "password-strength-bar"
      );
      const passwordStrengthText = document.getElementById(
        "password-strength-text"
      );
      const passwordStrengthDiv = document.getElementById("password-strength");
      const togglePasswordButton = document.getElementById("toggle-password");
      const photoInput = document.getElementById("avatar");
      const profilePreview = document.getElementById("profile-preview");

      // Gestion de la prévisualisation de la photo de profil
      photoInput.addEventListener("change", function () {
        const file = this.files[0];
        if (file) {
          // Vérifier le type et la taille du fichier
          const fileType = file.type;
          const fileSize = file.size / 1024 / 1024; // Taille en Mo
          const allowedTypes = ["image/jpeg", "image/png", "image/jpg"];

          const errorElement = document.querySelector(
            '.error-message[data-for="avatar"]'
          );

          if (!allowedTypes.includes(fileType)) {
            errorElement.textContent =
              "Format de fichier non supporté. Utilisez JPG ou PNG.";
            errorElement.classList.remove("hidden");
            this.value = "";
            return;
          }

          if (fileSize > 5) {
            errorElement.textContent =
              "La taille du fichier ne doit pas dépasser 5 Mo.";
            errorElement.classList.remove("hidden");
            this.value = "";
            return;
          }

          // Réinitialiser l'erreur si tout va bien
          errorElement.textContent = "";
          errorElement.classList.add("hidden");

          // Afficher l'aperçu
          const reader = new FileReader();
          reader.onload = function (e) {
            profilePreview.innerHTML = `<img src="${e.target.result}" alt="Aperçu" class="w-full h-full object-cover">`;
          };
          reader.readAsDataURL(file);
        }
      });

      // Éléments des exigences du mot de passe
      const reqLength = document.getElementById("req-length");
      const reqLowercase = document.getElementById("req-lowercase");
      const reqUppercase = document.getElementById("req-uppercase");
      const reqNumber = document.getElementById("req-number");
      const reqSpecial = document.getElementById("req-special");

      // Éléments pour la date de naissance
      const birthDay = document.getElementById("birth_day");
      const birthMonth = document.getElementById("birth_month");
      const birthYear = document.getElementById("birth_year");
      const dateNaissanceInput = document.getElementById(
        "date_naissance_utilisateur"
      );

      // Génération des options pour les jours
      for (let i = 1; i <= 31; i++) {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = i;
        birthDay.appendChild(option);
      }

      // Génération des options pour les années (de l'année actuelle - 100 à l'année actuelle)
      const currentYear = new Date().getFullYear();
      for (let i = currentYear; i >= currentYear - 100; i--) {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = i;
        birthYear.appendChild(option);
      }

      // Fonction pour mettre à jour le champ date caché
      const updateHiddenDateField = () => {
        const day = birthDay.value;
        const month = birthMonth.value;
        const year = birthYear.value;

        if (day && month && year) {
          // Format YYYY-MM-DD
          const formattedMonth = month.padStart(2, "0");
          const formattedDay = day.padStart(2, "0");
          dateNaissanceInput.value = `${year}-${formattedMonth}-${formattedDay}`;
        }
      };

      // Écouteurs pour les sélecteurs de date
      birthDay.addEventListener("change", updateHiddenDateField);
      birthMonth.addEventListener("change", updateHiddenDateField);
      birthYear.addEventListener("change", updateHiddenDateField);

      // Fonction pour vérifier la force du mot de passe et mettre à jour les exigences visuellement
      const checkPasswordStrength = (password) => {
        let strength = 0;
        const requirements = {
          length: password.length >= 8,
          lowercase: /[a-z]/.test(password),
          uppercase: /[A-Z]/.test(password),
          number: /[0-9]/.test(password),
          special: /[^a-zA-Z0-9]/.test(password),
        };

        // Mettre à jour visuellement les exigences
        reqLength.className = requirements.length
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqLowercase.className = requirements.lowercase
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqUppercase.className = requirements.uppercase
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqNumber.className = requirements.number
          ? "requirement text-green-600"
          : "requirement text-gray-600";
        reqSpecial.className = requirements.special
          ? "requirement text-green-600"
          : "requirement text-gray-600";

        // Calculer la force
        if (requirements.length) strength += 1;
        if (requirements.lowercase) strength += 1;
        if (requirements.uppercase) strength += 1;
        if (requirements.number) strength += 1;
        if (requirements.special) strength += 1;

        passwordStrengthDiv.classList.remove("hidden");

        if (strength === 0) {
          passwordStrengthBar.style.width = "0%";
          passwordStrengthBar.className = "h-full w-0 bg-gray-300";
          passwordStrengthText.textContent = "";
          return 0;
        } else if (strength <= 2) {
          passwordStrengthBar.style.width = "33%";
          passwordStrengthBar.className = "h-full bg-red-500";
          passwordStrengthText.textContent = "Faible";
          passwordStrengthText.className = "text-xs mt-1 text-red-500";
          return 1;
        } else if (strength <= 4) {
          passwordStrengthBar.style.width = "66%";
          passwordStrengthBar.className = "h-full bg-yellow-500";
          passwordStrengthText.textContent = "Moyen";
          passwordStrengthText.className = "text-xs mt-1 text-yellow-600";
          return 2;
        } else {
          passwordStrengthBar.style.width = "100%";
          passwordStrengthBar.className = "h-full bg-green-500";
          passwordStrengthText.textContent = "Fort";
          passwordStrengthText.className = "text-xs mt-1 text-green-500";
          return 3;
        }
      };

      // Écouter les changements dans le champ de mot de passe
      passwordInput.addEventListener("input", (e) => {
        checkPasswordStrength(e.target.value);
      });

      // Toggle visibilité du mot de passe
      togglePasswordButton.addEventListener("click", () => {
        const type =
          passwordInput.getAttribute("type") === "password"
            ? "text"
            : "password";
        passwordInput.setAttribute("type", type);
        passwordConfirmInput.setAttribute("type", type);

        // Mise à jour de l'icône
        if (type === "text") {
          togglePasswordButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
            </svg>
          `;
        } else {
          togglePasswordButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          `;
        }
      });

      // Format pour le numéro de téléphone
      const phoneInput = document.getElementById("telephone_utilisateur");
      phoneInput.addEventListener("input", function (e) {
        // Supprimer tout sauf les chiffres
        let value = e.target.value.replace(/\D/g, "");

        // Formatter avec des espaces
        if (value.length > 0) {
          value = value.match(/.{1,2}/g).join(" ");
        }

        e.target.value = value;
      });

      // Validation avancée des emails
      const validateEmail = (email) => {
        // Expression régulière pour une validation stricte des emails
        const strictEmailRegex =
          /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

        if (!strictEmailRegex.test(email)) {
          return {
            isValid: false,
            message: "Veuillez entrer une adresse email valide",
          };
        }

        // Vérifier les domaines courants pour les fautes de frappe
        const domain = email.split("@")[1];
        const commonTypos = {
          "gmail.co": "gmail.com",
          "gmail.fr": "gmail.com",
          "hotmail.fr": "hotmail.com",
          "yahooo.com": "yahoo.com",
          "yahooo.fr": "yahoo.fr",
          "hotmial.com": "hotmail.com",
          "gmial.com": "gmail.com",
          "outlok.com": "outlook.com",
          "outloo.com": "outlook.com",
        };

        if (commonTypos[domain]) {
          return {
            isValid: false,
            message: `Voulez-vous dire ${email.split("@")[0]}@${commonTypos[domain]} ?`,
          };
        }

        // Vérifier les TLD (Top Level Domain) valides
        const tld = domain.split(".").pop();
        const validTLDs = [
          "com",
          "net",
          "org",
          "edu",
          "gov",
          "mil",
          "fr",
          "co",
          "io",
          "eu",
          "info",
          "biz",
          "me",
          "tv",
        ];

        if (!validTLDs.includes(tld)) {
          return {
            isValid: false,
            message: "L'extension d'email semble invalide",
          };
        }

        return {
          isValid: true,
          message: "",
        };
      };

      // Validation des champs en temps réel
      const validateInput = (input) => {
        const errorElement = document.querySelector(
          `.error-message[data-for="${input.name}"]`
        );
        let isValid = true;

        // Réinitialiser les erreurs
        errorElement.textContent = "";
        errorElement.classList.add("hidden");
        input.classList.remove("border-red-500");

        if (input.hasAttribute("required") && !input.value.trim()) {
          errorElement.textContent = "Ce champ est obligatoire";
          errorElement.classList.remove("hidden");
          input.classList.add("border-red-500");
          isValid = false;
        } else if (input.name === "email" && input.value) {
          // Utiliser la validation d'email avancée
          const emailValidation = validateEmail(input.value);

          if (!emailValidation.isValid) {
            errorElement.textContent = emailValidation.message;
            errorElement.classList.remove("hidden");
            input.classList.add("border-red-500");
            isValid = false;
          }
        } else if (input.name === "password" && input.value) {
          const hasLength = input.value.length >= 8;
          const hasLower = /[a-z]/.test(input.value);
          const hasUpper = /[A-Z]/.test(input.value);
          const hasNumber = /[0-9]/.test(input.value);
          const hasSpecial = /[^a-zA-Z0-9]/.test(input.value);

          if (
            !hasLength ||
            !hasLower ||
            !hasUpper ||
            !hasNumber ||
            !hasSpecial
          ) {
            errorElement.textContent =
              "Votre mot de passe ne répond pas à toutes les exigences";
            errorElement.classList.remove("hidden");
            input.classList.add("border-red-500");
            isValid = false;
          }
        } else if (input.name === "passwordConfirm" && input.value) {
          const passwordValue = document.getElementById("password").value;
          if (input.value !== passwordValue) {
            errorElement.textContent = "Les mots de passe ne correspondent pas";
            errorElement.classList.remove("hidden");
            input.classList.add("border-red-500");
            isValid = false;
          }
        } else if (input.name === "telephone_utilisateur" && input.value) {
          // Vérifier le format du numéro de téléphone français
          const phoneValue = input.value.replace(/\s/g, "");
          if (phoneValue.length !== 10) {
            errorElement.textContent = "Le numéro doit contenir 10 chiffres";
            errorElement.classList.remove("hidden");
            input.classList.add("border-red-500");
            isValid = false;
          }
        } else if (input.name === "date_naissance_utilisateur" && input.value) {
          const birthDate = new Date(input.value);
          const now = new Date();
          const minAge = 13; // Âge minimum pour s'inscrire

          // Calculer l'âge
          let age = now.getFullYear() - birthDate.getFullYear();
          const monthDiff = now.getMonth() - birthDate.getMonth();
          if (
            monthDiff < 0 ||
            (monthDiff === 0 && now.getDate() < birthDate.getDate())
          ) {
            age--;
          }

          if (age < minAge) {
            errorElement.textContent = `Vous devez avoir au moins ${minAge} ans pour vous inscrire`;
            errorElement.classList.remove("hidden");
            input.classList.add("border-red-500");
            isValid = false;
          }
        } else if (input.name === "terms" && !input.checked) {
          errorElement.textContent =
            "Vous devez accepter les conditions d'utilisation";
          errorElement.classList.remove("hidden");
          isValid = false;
        } else if (input.name === "avatar" && input.files.length > 0) {
          const file = input.files[0];
          const fileType = file.type;
          const fileSize = file.size / 1024 / 1024; // Taille en Mo
          const allowedTypes = ["image/jpeg", "image/png", "image/jpg"];

          if (!allowedTypes.includes(fileType)) {
            errorElement.textContent =
              "Format de fichier non supporté. Utilisez JPG ou PNG.";
            errorElement.classList.remove("hidden");
            isValid = false;
          } else if (fileSize > 5) {
            errorElement.textContent =
              "La taille du fichier ne doit pas dépasser 5 Mo.";
            errorElement.classList.remove("hidden");
            isValid = false;
          }
        }

        return isValid;
      };

      // Validation de la date de naissance par les sélecteurs
      const validateBirthDate = () => {
        const day = birthDay.value;
        const month = birthMonth.value;
        const year = birthYear.value;
        const errorElement = document.querySelector(
          `.error-message[data-for="date_naissance_utilisateur"]`
        );

        errorElement.textContent = "";
        errorElement.classList.add("hidden");
        [birthDay, birthMonth, birthYear].forEach((el) =>
          el.classList.remove("border-red-500")
        );

        if (!day || !month || !year) {
          errorElement.textContent =
            "Veuillez indiquer votre date de naissance complète";
          errorElement.classList.remove("hidden");
          [birthDay, birthMonth, birthYear].forEach((el) => {
            if (!el.value) el.classList.add("border-red-500");
          });
          return false;
        }

        // Vérifier l'âge minimum
        const birthDate = new Date(year, month - 1, day);
        const now = new Date();
        const minAge = 13;

        let age = now.getFullYear() - birthDate.getFullYear();
        const monthDiff = now.getMonth() - birthDate.getMonth();
        if (
          monthDiff < 0 ||
          (monthDiff === 0 && now.getDate() < birthDate.getDate())
        ) {
          age--;
        }

        if (age < minAge) {
          errorElement.textContent = `Vous devez avoir au moins ${minAge} ans pour vous inscrire`;
          errorElement.classList.remove("hidden");
          [birthDay, birthMonth, birthYear].forEach((el) =>
            el.classList.add("border-red-500")
          );
          return false;
        }

        return true;
      };

      // Ajouter des écouteurs d'événements pour la validation en temps réel
      form.querySelectorAll("input, select").forEach((input) => {
        if (input.name === "terms") {
          input.addEventListener("change", () => validateInput(input));
        } else if (
          ["birth_day", "birth_month", "birth_year"].includes(input.id)
        ) {
          input.addEventListener("change", validateBirthDate);
        } else {
          input.addEventListener("blur", () => validateInput(input));
          if (input.name === "password" || input.name === "passwordConfirm") {
            input.addEventListener("input", () => {
              if (passwordConfirmInput.value) {
                validateInput(passwordConfirmInput);
              }
            });
          } else if (input.name === "email") {
            // Validation en temps réel pour l'email
            input.addEventListener("input", () => {
              if (input.value.includes("@")) {
                validateInput(input);
              }
            });
          }
        }
      });

      // Gestion de la soumission du formulaire
      form.addEventListener("submit", async (event) => {
        event.preventDefault();

        // S'assurer que le champ date caché est bien rempli
        updateHiddenDateField();

        // Valider tous les champs avant l'envoi
        let isFormValid = true;

        // Valider la date de naissance
        if (!validateBirthDate()) {
          isFormValid = false;
        }

        // Valider les autres champs
        form.querySelectorAll("input:not([type='hidden'])").forEach((input) => {
          if (
            !["birth_day", "birth_month", "birth_year"].includes(input.id) &&
            !validateInput(input)
          ) {
            isFormValid = false;
          }
        });

        if (!isFormValid) {
          // Faire défiler jusqu'à la première erreur
          const firstError = form.querySelector(".error-message:not(.hidden)");
          if (firstError) {
            firstError.scrollIntoView({ behavior: "smooth", block: "center" });
          }
          return;
        }

        // Afficher un message de chargement et désactiver le bouton
        messageDiv.textContent = "";
        messageDiv.className = "mt-4 text-center hidden";
        buttonText.classList.add("hidden");
        buttonLoader.classList.remove("hidden");
        submitButton.disabled = true;

        const formData = new FormData(form);

        try {
          console.log("Envoi de la requête à /api/register");
          const response = await fetch("/api/register", {
            method: "POST",
            body: formData,
          });

          console.log("Réponse reçue:", response);

          if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
          }

          const result = await response.json();
          console.log("Résultat:", result);

          if (result.status === "success") {
            messageDiv.textContent =
              "Inscription réussie ! Redirection en cours...";
            messageDiv.className =
              "mt-4 text-center block p-3 bg-green-100 text-green-700 rounded-md";
            form.reset();

            // Réinitialiser l'aperçu de la photo
            profilePreview.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            `;

            // Redirection après 2 secondes
            setTimeout(() => {
              window.location.href = "/auth/connexion";
            }, 2000);
          } else {
            messageDiv.textContent =
              result.message || "Une erreur est survenue. Veuillez réessayer.";
            messageDiv.className =
              "mt-4 text-center block p-3 bg-red-100 text-red-700 rounded-md";
            buttonText.classList.remove("hidden");
            buttonLoader.classList.add("hidden");
            submitButton.disabled = false;
          }
        } catch (error) {
          console.error("Erreur détaillée:", error);
          messageDiv.textContent =
            error.message ||
            "Une erreur est survenue lors de la connexion au serveur. Veuillez réessayer.";
          messageDiv.className =
            "mt-4 text-center block p-3 bg-red-100 text-red-700 rounded-md";
          buttonText.classList.remove("hidden");
          buttonLoader.classList.add("hidden");
          submitButton.disabled = false;
        }
      });
    });
  </script>
</Layout>
